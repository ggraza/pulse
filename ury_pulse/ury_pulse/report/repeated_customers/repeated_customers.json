{
 "add_total_row": 0,
 "columns": [],
 "creation": "2023-09-29 14:52:16.514901",
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [
  {
   "fieldname": "start_date",
   "fieldtype": "Date",
   "label": "From Date",
   "mandatory": 1,
   "wildcard_filter": 0
  },
  {
   "fieldname": "end_date",
   "fieldtype": "Date",
   "label": "To Date",
   "mandatory": 1,
   "wildcard_filter": 0
  },
  {
   "fieldname": "branch",
   "fieldtype": "Link",
   "label": "Branch",
   "mandatory": 1,
   "options": "Branch",
   "wildcard_filter": 0
  }
 ],
 "idx": 0,
 "is_standard": "Yes",
 "letterhead": null,
 "modified": "2024-08-24 12:08:25.676663",
 "modified_by": "Administrator",
 "module": "URY Pulse",
 "name": "Repeated Customers",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "SELECT\n    `Date`,\n    `Total Customers`,\n    `New Customers`,\n    `Total Customers`-`New Customers` AS `Repeated Customers`,\n    ROUND(((`Total Customers`-`New Customers`) / `Total Customers`)*100,2)  AS Percentage\nFROM\n    (SELECT\n    date_list.`date` AS `Date`,\n    COUNT(d.customer) AS `Total Customers`,\n    COUNT(DISTINCT CASE WHEN b.customer IS NOT NULL THEN b.customer END) AS `New Customers`\n    FROM \n    (\n        SELECT %(start_date)s AS `date`\n        UNION\n        SELECT DATE_ADD(%(start_date)s, INTERVAL n DAY) AS `date`\n        FROM (\n            SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n\n            FROM (\n                SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9\n            ) AS a\n            CROSS JOIN (\n                SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9\n            ) AS b\n            CROSS JOIN (\n                SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9\n            ) AS c\n            ORDER BY n\n        ) AS nums\n        WHERE DATE_ADD(%(start_date)s, INTERVAL n DAY) < %(end_date)s\n        UNION\n        SELECT %(end_date)s AS `date`\n    ) AS date_list\n    LEFT JOIN `tabPOS Invoice` d ON (\n        d.`branch` = %(branch)s\n        AND d.`status` IN (\"Consolidated\",\"Paid\") \n        AND d.`docstatus` = 1\n    )\n    LEFT JOIN `tabPOS Invoice` b ON (\n        b.`name` = d.`name`\n        AND b.`branch` = %(branch)s\n        AND b.`status` IN (\"Consolidated\", \"Paid\")\n        AND b.`docstatus` = 1\n        AND NOT EXISTS (\n            SELECT 1\n            FROM `tabPOS Invoice` c\n            LEFT JOIN `tabURY Report Settings` rs ON (\n                rs.`branch` = %(branch)s\n            )\n            WHERE\n                (\n                    ((rs.`hours` IS NULL OR rs.`hours` = 0) IS NULL AND c.`posting_date` < date_list.`date`)\n                    OR (rs.`hours` > 0 AND TIMESTAMP(c.`posting_date`, c.`posting_time`) < TIMESTAMP(date_list.`date`, CONCAT(LPAD(rs.`hours`, 2, '0'), ':00:00')))\n                    OR (rs.`branch` IS NULL AND c.`posting_date` < date_list.`date`)\n                )\n                AND c.`customer` = b.`customer`\n                AND c.`branch` = %(branch)s\n                AND c.`status` IN (\"Consolidated\", \"Paid\")\n                AND c.`docstatus` = 1\n        )\n    )\n    LEFT JOIN `tabURY Report Settings` rs ON (\n        rs.`branch` = %(branch)s\n    )\n    WHERE\n    (\n        ((rs.`hours` IS NULL OR rs.`hours` = 0) IS NULL AND d.`posting_date` = date_list.`date`)\n        OR (rs.`hours` > 0 AND TIMESTAMP(d.`posting_date`, d.`posting_time`) <= TIMESTAMP(DATE_ADD(date_list.`date`, INTERVAL 1 DAY), CONCAT(LPAD(rs.`hours`, 2, '0'), ':00:00')) AND TIMESTAMP(d.`posting_date`, d.`posting_time`) >= TIMESTAMP(date_list.`date`, CONCAT(LPAD(rs.`hours`, 2, '0'), ':00:00')))\n        OR (rs.`branch` IS NULL AND d.`posting_date` = date_list.`date`)\n    )\n    GROUP BY \n        date_list.`date`\n    ORDER BY \n        date_list.`date` DESC) AS subquery;",
 "ref_doctype": "POS Invoice",
 "report_name": "Repeated Customers",
 "report_type": "Query Report",
 "roles": [
  {
   "role": "Accounts Manager"
  },
  {
   "role": "Accounts User"
  },
  {
   "role": "URY Manager"
  }
 ]
}